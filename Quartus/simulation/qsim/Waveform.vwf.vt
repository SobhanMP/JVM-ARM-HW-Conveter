// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/11/2018 05:41:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          acc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module acc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg oram_ready;
reg reset;
// wires                                               
wire [31:0] arm_inst;
wire [7:0] byte_to_push;
wire [31:0] instr;
wire [7:0] iram;
wire iram_ready;
wire is_wide;
wire [7:0] jvm_opcode;
wire [8:0] link_list_ptr;
wire [7:0] oram_iter;
wire param_even;
wire [4:0] parameter_number;
wire [31:0] push_inst;
wire push_wide;
wire q_select;
wire [1:0] state;
wire valid_write;
wire waiting;

// assign statements (if any)                          
acc i1 (
// port map - connection between master ports and signals/registers   
	.arm_inst(arm_inst),
	.byte_to_push(byte_to_push),
	.clk(clk),
	.instr(instr),
	.iram(iram),
	.iram_ready(iram_ready),
	.is_wide(is_wide),
	.jvm_opcode(jvm_opcode),
	.link_list_ptr(link_list_ptr),
	.oram_iter(oram_iter),
	.oram_ready(oram_ready),
	.param_even(param_even),
	.parameter_number(parameter_number),
	.push_inst(push_inst),
	.push_wide(push_wide),
	.q_select(q_select),
	.reset(reset),
	.state(state),
	.valid_write(valid_write),
	.waiting(waiting)
);
initial 
begin 
#100000000 $finish;
end 

// clk
initial
begin
	clk = 1'b0;
end 

// oram_ready
initial
begin
	oram_ready = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
endmodule

